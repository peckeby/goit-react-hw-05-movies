{"version":3,"file":"static/js/186.bd4db41f.chunk.js","mappings":"iRAEaA,EAAmB,mCAAG,WAAMC,GAAN,uFACVC,EAAAA,EAAAA,IAAA,wGAC4ED,IAFlE,cAC3BE,EAD2B,yBAI1BA,EAASC,MAJiB,2CAAH,sDAOnBC,EAAiB,mCAAG,WAAMC,GAAN,uFACRJ,EAAAA,EAAAA,IAAA,6CACiBI,EADjB,6DADQ,cACzBH,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,sDAOjBG,EAAc,mCAAG,WAAMD,GAAN,uFACLJ,EAAAA,EAAAA,IAAA,6CACiBI,EADjB,oFADK,cACtBH,EADsB,yBAKrBA,EAASC,MALY,2CAAH,sDAQdI,EAAiB,mCAAG,WAAOF,EAASL,GAAhB,uFACRC,EAAAA,EAAAA,IAAA,6CACiBI,EADjB,iFACiGL,IAFzF,cACzBE,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,wDAMjBK,EAAgB,mCAAG,WAAOC,EAAQT,GAAf,uFACPC,EAAAA,EAAAA,IAAA,kHACsFQ,EADtF,iBACqGT,EADrG,wBADO,cACxBE,EADwB,yBAIvBA,EAASC,MAJc,2CAAH,uD,6EC5Bd,SAASO,IACtB,OACE,SAAC,KAAD,CACEC,OAAO,KACPC,MAAM,KACNC,MAAM,UACNC,UAAU,eACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,GAGd,C,wHCyDD,UAhEA,WACE,IAAQC,GAAOC,EAAAA,EAAAA,MAAPD,GAER,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAAwBN,EAAAA,EAAAA,UAAS,GAAjC,eAAOO,EAAP,KAAaC,EAAb,KACA,GAAoCR,EAAAA,EAAAA,UAAS,GAA7C,eAAOS,EAAP,KAAmBC,EAAnB,KA2BA,OAzBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,2FACEP,GAAa,GADf,mBAG+BjB,EAAAA,EAAAA,IAAkBW,EAAIS,GAHrD,OAGUK,EAHV,OAMQV,EADJK,EAAO,EACQ,SAAAM,GAAS,OAAIA,EAAUC,OAAOF,EAAaG,QAAlC,EACTH,EAAaG,SAEnB,IAATR,GAAcG,EAAcE,EAAaI,aAT7C,gDAWIV,EAAS,EAAD,IAXZ,yBAaIF,GAAa,GAbjB,6EADc,uBAAC,WAAD,wBAiBda,EACD,GAAE,CAACV,EAAMT,KAQR,gCACGK,GACC,SAAC,IAAD,KAEA,4BACE,wBACGF,EAAQiB,OAAS,EAChBjB,EAAQkB,KAAI,SAAAC,GAAM,OAChB,2BACE,qCAAaA,EAAOC,WACpB,uBAAID,EAAOE,YAFJF,EAAOtB,GADA,KAOlB,8EAGHW,EAAa,GAAKF,EAAOE,IACxB,mBAAQc,KAAK,SAASC,QAxBb,SAAAC,GACjBA,EAAIC,iBACJlB,GAAQ,SAAAK,GAAS,OAAIA,EAAY,CAAhB,GAClB,EAqBS,6BAMLR,IAAS,uEAAqCA,EAAMsB,aAG1D,C","sources":["api/api.js","components/Loader/Loader.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport const fetchTrendingMovies = async num => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=369463d5ad6fe666accc0e43886b3c6a&page=${num}`\n  );\n  return response.data;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}?api_key=369463d5ad6fe666accc0e43886b3c6a&language=en-US`\n  );\n  return response.data;\n};\n\nexport const fetchMovieCast = async movieId => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=369463d5ad6fe666accc0e43886b3c6a&language&language=en-US\n    `\n  );\n  return response.data;\n};\n\nexport const fetchMovieReviews = async (movieId, num) => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=369463d5ad6fe666accc0e43886b3c6a&language=en-US&page=${num}`\n  );\n  return response.data;\n};\nexport const fetchMovieSearch = async (search, num) => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?api_key=369463d5ad6fe666accc0e43886b3c6a&language=en-US&query=${search}&page=${num}&include_adult=true`\n  );\n  return response.data;\n};\n","import { Bars } from 'react-loader-spinner';\n\nexport default function Loader() {\n  return (\n    <Bars\n      height=\"80\"\n      width=\"80\"\n      color=\"#4fa94d\"\n      ariaLabel=\"bars-loading\"\n      wrapperStyle={{}}\n      wrapperClass=\"\"\n      visible={true}\n    />\n  );\n}\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nimport { fetchMovieReviews } from 'api/api';\nimport Loader from 'components/Loader/Loader';\n\nfunction Reviews() {\n  const { id } = useParams();\n\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n\n  useEffect(() => {\n    async function movieCastFetch() {\n      setIsLoading(true);\n      try {\n        const reviewsFetch = await fetchMovieReviews(id, page);\n\n        page > 1\n          ? setReviews(prevState => prevState.concat(reviewsFetch.results))\n          : setReviews(reviewsFetch.results);\n\n        page === 1 && setTotalPages(reviewsFetch.total_pages);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    movieCastFetch();\n  }, [page, id]);\n\n  const pageChange = evt => {\n    evt.preventDefault();\n    setPage(prevState => prevState + 1);\n  };\n\n  return (\n    <>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div>\n          <ul>\n            {reviews.length > 0 ? (\n              reviews.map(review => (\n                <li key={review.id}>\n                  <h3>Author: {review.author}</h3>\n                  <p>{review.content}</p>\n                </li>\n              ))\n            ) : (\n              <p>Whoops, there is no reviews for now ðŸ˜¢</p>\n            )}\n          </ul>\n          {totalPages > 1 && page < totalPages && (\n            <button type=\"button\" onClick={pageChange}>\n              More reviews\n            </button>\n          )}\n        </div>\n      )}\n      {error && <p>Whoops, something went wrong ðŸ˜¢: {error.message}</p>}\n    </>\n  );\n}\n\nexport default Reviews;\n"],"names":["fetchTrendingMovies","num","axios","response","data","fetchMovieDetails","movieId","fetchMovieCast","fetchMovieReviews","fetchMovieSearch","search","Loader","height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","id","useParams","useState","reviews","setReviews","isLoading","setIsLoading","error","setError","page","setPage","totalPages","setTotalPages","useEffect","reviewsFetch","prevState","concat","results","total_pages","movieCastFetch","length","map","review","author","content","type","onClick","evt","preventDefault","message"],"sourceRoot":""}