{"version":3,"file":"static/js/362.0e727d75.chunk.js","mappings":"mTAEaA,EAAmB,mCAAG,WAAMC,GAAN,uFACVC,EAAAA,EAAAA,IAAA,wGAC4ED,IAFlE,cAC3BE,EAD2B,yBAI1BA,EAASC,MAJiB,2CAAH,sDAOnBC,EAAiB,mCAAG,WAAMC,GAAN,uFACRJ,EAAAA,EAAAA,IAAA,6CACiBI,EADjB,6DADQ,cACzBH,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,sDAOjBG,EAAc,mCAAG,WAAMD,GAAN,uFACLJ,EAAAA,EAAAA,IAAA,6CACiBI,EADjB,oFADK,cACtBH,EADsB,yBAKrBA,EAASC,MALY,2CAAH,sDAQdI,EAAiB,mCAAG,WAAOF,EAASL,GAAhB,uFACRC,EAAAA,EAAAA,IAAA,6CACiBI,EADjB,iFACiGL,IAFzF,cACzBE,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,wDAMjBK,EAAgB,mCAAG,WAAOC,EAAQT,GAAf,uFACPC,EAAAA,EAAAA,IAAA,kHACsFQ,EADtF,iBACqGT,EADrG,wBADO,cACxBE,EADwB,yBAIvBA,EAASC,MAJc,2CAAH,uD,6EC5Bd,SAASO,IACtB,OACE,SAAC,KAAD,CACEC,OAAO,KACPC,MAAM,KACNC,MAAM,UACNC,UAAU,eACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,GAGd,C,mIC2CD,UAlDA,WAA6B,IAAD,QAClBC,GAAOC,EAAAA,EAAAA,MAAPD,GAEFE,EAAY,qBADDC,EAAAA,EAAAA,MACaC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,UAE7C,GAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,2FACEH,GAAa,GADf,mBAG+BxB,EAAAA,EAAAA,IAAkBc,GAHjD,OAGUc,EAHV,OAIIN,EAASM,GAJb,gDAMIF,EAAS,EAAD,IANZ,yBAQIF,GAAa,GARjB,6EADc,uBAAC,WAAD,wBAYdK,EACD,GAAE,CAACf,KAGF,gCACGS,IAAa,SAAC,IAAD,IACbE,IAAS,uEAAqCA,EAAMK,WACpDT,GACC,4BACE,SAAC,KAAD,CAAMU,GAAIf,EAAV,6BACA,gBACEgB,IAAG,8CAAyCX,EAAMY,aAClDC,IAAG,iBAAEb,QAAF,IAAEA,OAAF,EAAEA,EAAOc,YAAT,QAAiBd,EAAMe,eAC1B7B,OAAQ,OAEV,yCAAKc,QAAL,IAAKA,OAAL,EAAKA,EAAOc,YAAZ,QAAoBd,EAAMe,kBAC1B,uBAAIf,EAAMgB,YACV,mDACA,SAAC,KAAD,CAAMN,GAAI,OAAV,oBACA,SAAC,KAAD,CAAMA,GAAI,UAAV,sBACA,SAAC,KAAD,QAGF,yCAIP,C","sources":["api/api.js","components/Loader/Loader.jsx","pages/MovieDetailsPage/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport const fetchTrendingMovies = async num => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=369463d5ad6fe666accc0e43886b3c6a&page=${num}`\n  );\n  return response.data;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}?api_key=369463d5ad6fe666accc0e43886b3c6a&language=en-US`\n  );\n  return response.data;\n};\n\nexport const fetchMovieCast = async movieId => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=369463d5ad6fe666accc0e43886b3c6a&language&language=en-US\n    `\n  );\n  return response.data;\n};\n\nexport const fetchMovieReviews = async (movieId, num) => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=369463d5ad6fe666accc0e43886b3c6a&language=en-US&page=${num}`\n  );\n  return response.data;\n};\nexport const fetchMovieSearch = async (search, num) => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?api_key=369463d5ad6fe666accc0e43886b3c6a&language=en-US&query=${search}&page=${num}&include_adult=true`\n  );\n  return response.data;\n};\n","import { Bars } from 'react-loader-spinner';\n\nexport default function Loader() {\n  return (\n    <Bars\n      height=\"80\"\n      width=\"80\"\n      color=\"#4fa94d\"\n      ariaLabel=\"bars-loading\"\n      wrapperStyle={{}}\n      wrapperClass=\"\"\n      visible={true}\n    />\n  );\n}\n","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { useParams, Outlet, useLocation } from 'react-router-dom';\nimport { fetchMovieDetails } from 'api/api';\nimport Loader from 'components/Loader/Loader';\nimport { Link } from 'components/SharedLayout/SharedLayout.styled';\n\nfunction MovieDetailsPage() {\n  const { id } = useParams();\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/movies';\n\n  const [movie, setMovie] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    async function movieDetailsSetting() {\n      setIsLoading(true);\n      try {\n        const movieDetails = await fetchMovieDetails(id);\n        setMovie(movieDetails);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    movieDetailsSetting();\n  }, [id]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <p>Whoops, something went wrong ðŸ˜¢: {error.message}</p>}\n      {movie ? (\n        <div>\n          <Link to={backLinkHref}>Back to movies</Link>\n          <img\n            src={`https://image.tmdb.org/t/p/original/${movie.poster_path}`}\n            alt={movie?.name ?? movie.original_title}\n            height={300}\n          ></img>\n          <h1>{movie?.name ?? movie.original_title}</h1>\n          <p>{movie.overview}</p>\n          <p>Additional information</p>\n          <Link to={'cast'}>Cast </Link>\n          <Link to={'reviews'}>Reviews</Link>\n          <Outlet />\n        </div>\n      ) : (\n        <h2>Loading...</h2>\n      )}\n    </>\n  );\n}\n\nexport default MovieDetailsPage;\n"],"names":["fetchTrendingMovies","num","axios","response","data","fetchMovieDetails","movieId","fetchMovieCast","fetchMovieReviews","fetchMovieSearch","search","Loader","height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","id","useParams","backLinkHref","useLocation","state","from","useState","movie","setMovie","isLoading","setIsLoading","error","setError","useEffect","movieDetails","movieDetailsSetting","message","to","src","poster_path","alt","name","original_title","overview"],"sourceRoot":""}